---
- name:          Is Product already Installed?
  command:       egrep {{ product_id }} $HOME/var/ibm/InstallationManager/installed.xml
  register:      version_already_installed
  ignore_errors: true

#-  debug:       var=version_already_installed
- name:          Create Binaries Staging directory
  file:          path={{ staging_dir }} state=directory mode=0755
  when:          version_already_installed.rc != 0

- name:          Create Logs directory
  file:          path={{ logs_dir }} state=directory mode=0755
  when:          version_already_installed.rc != 0

- name:          Download IBM Installation Manager
  get_url:
    url:         "{{ ibm_repository_url }}/{{ bin_file }}"
    dest:        "{{ staging_dir }}/{{ bin_file }}"
    mode:        0755   
  when:          version_already_installed.rc != 0

- name:          Extract IBM Installation Manager
  unarchive:
    src:         "{{ staging_dir }}/{{ bin_file }}"
    dest:        "{{ staging_dir }}/"
    copy:        no
  when:          version_already_installed.rc != 0

- name:          Install/Update IBM Installation Manager
  command:
    chdir={{ staging_dir }}
    {{ staging_dir }}/tools/imcl install com.ibm.cic.agent -acceptLicense -installationDirectory {{ imgr_install_location }} -repositories {{ staging_dir }} -log {{ logs_dir }}/iim_install.{{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}.log
  register:      cout
  changed_when:  (cout.stdout.find('Installed com.ibm.cic.agent') != -1) or (cout.stdout.find('Updated to com.ibm.cic.agent') != -1)
  when:          version_already_installed.rc != 0

- debug:        msg={{ cout }}

- name:          Cleanup Binaries directory
  file:          path={{ staging_dir }} state=absent
  when:          version_already_installed.rc != 0